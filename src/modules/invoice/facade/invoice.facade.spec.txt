import { Sequelize } from "sequelize-typescript";
import InvoiceModel from "../repository/invoice.model";
import InvoiceInvoiceItemsModel from "../repository/invoice-invoiceItems.model";
import InvoiceItemsModel from "../repository/invoice-items.model";
import InvoiceFacadeFactory from "../factory/invoice.facade.factory";

describe("Invoice Facade test", () => {
  let sequelize: Sequelize;

  beforeEach(async () => {
    sequelize = new Sequelize({
      dialect: "sqlite",
      storage: ":memory:",
      logging: false,
      sync: { force: true },
    });

    await sequelize.addModels([
      InvoiceModel,
      InvoiceInvoiceItemsModel,
      InvoiceItemsModel,
    ]);

    await sequelize.sync();
  });

  afterEach(async () => {
    await sequelize.close();
  });

  it("should generate a invoice using facade", async () => {
    const facade = InvoiceFacadeFactory.create();

    const input = {
      name: "Invoice 1",
      document: "Document 1",
      city: "City 1",
      street: "Rua 1",
      number: "1",
      zipCode: "00000-000",
      complement: "House",
      state: "UF",
      items: [
        {
          id: "Id 1",
          name: "Product 1",
          price: 5,
        },
        {
          id: "Id 2",
          name: "Product 2",
          price: 10,
        },
      ],
    };

     const invoice = await facade.generate(input);

     const result = await facade.find({id: invoice.id})
    
    expect(result.id).toBeDefined();
    expect(result.name).toBe(input.name);
    expect(result.document).toBe(input.document);
    expect(result.address.street).toBe(input.street);
    expect(result.address.number).toBe(input.number);
    expect(result.address.complement).toBe(input.complement);
    expect(result.address.city).toBe(input.city);
    expect(result.address.state).toBe(input.state);
    expect(result.address.zipCode).toBe(input.zipCode);
    // expect(result.items.length).toBe(2);
    // expect(result.items[0].id).toBeDefined();
    // expect(result.items[0].name).toBe(input.items[0].name);
    // expect(result.items[0].price).toBe(input.items[0].price);
    // expect(result.items[1].id).toBeDefined();
    // expect(result.items[1].name).toBe(input.items[1].name);
    // expect(result.items[1].price).toBe(input.items[1].price);
  });
});
